"""
    Aries Cloud Agent

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v0.7.2
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from acapy_client.api_client import ApiClient, Endpoint as _Endpoint
from acapy_client.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from acapy_client.model.conn_record import ConnRecord
from acapy_client.model.connection_list import ConnectionList
from acapy_client.model.connection_metadata import ConnectionMetadata
from acapy_client.model.connection_metadata_set_request import ConnectionMetadataSetRequest
from acapy_client.model.connection_static_request import ConnectionStaticRequest
from acapy_client.model.connection_static_result import ConnectionStaticResult
from acapy_client.model.create_invitation_request import CreateInvitationRequest
from acapy_client.model.endpoints_result import EndpointsResult
from acapy_client.model.invitation_result import InvitationResult
from acapy_client.model.receive_invitation_request import ReceiveInvitationRequest


class ConnectionApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client
        self.connections_conn_id_accept_invitation_post_endpoint = _Endpoint(
            settings={
                'response_type': (ConnRecord,),
                'auth': [
                    'AuthorizationHeader'
                ],
                'endpoint_path': '/connections/{conn_id}/accept-invitation',
                'operation_id': 'connections_conn_id_accept_invitation_post',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'conn_id',
                    'mediation_id',
                    'my_endpoint',
                    'my_label',
                ],
                'required': [
                    'conn_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'my_endpoint',
                ]
            },
            root_map={
                'validations': {
                    ('my_endpoint',): {

                        'regex': {
                            'pattern': r'^[A-Za-z0-9\.\-\+]+:\/\/([A-Za-z0-9][.A-Za-z0-9-_]+[A-Za-z0-9])+(:[1-9][0-9]*)?(\/[^?&#]+)?$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'conn_id':
                        (str,),
                    'mediation_id':
                        (str,),
                    'my_endpoint':
                        (str,),
                    'my_label':
                        (str,),
                },
                'attribute_map': {
                    'conn_id': 'conn_id',
                    'mediation_id': 'mediation_id',
                    'my_endpoint': 'my_endpoint',
                    'my_label': 'my_label',
                },
                'location_map': {
                    'conn_id': 'path',
                    'mediation_id': 'query',
                    'my_endpoint': 'query',
                    'my_label': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.connections_conn_id_accept_request_post_endpoint = _Endpoint(
            settings={
                'response_type': (ConnRecord,),
                'auth': [
                    'AuthorizationHeader'
                ],
                'endpoint_path': '/connections/{conn_id}/accept-request',
                'operation_id': 'connections_conn_id_accept_request_post',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'conn_id',
                    'my_endpoint',
                ],
                'required': [
                    'conn_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'my_endpoint',
                ]
            },
            root_map={
                'validations': {
                    ('my_endpoint',): {

                        'regex': {
                            'pattern': r'^[A-Za-z0-9\.\-\+]+:\/\/([A-Za-z0-9][.A-Za-z0-9-_]+[A-Za-z0-9])+(:[1-9][0-9]*)?(\/[^?&#]+)?$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'conn_id':
                        (str,),
                    'my_endpoint':
                        (str,),
                },
                'attribute_map': {
                    'conn_id': 'conn_id',
                    'my_endpoint': 'my_endpoint',
                },
                'location_map': {
                    'conn_id': 'path',
                    'my_endpoint': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.connections_conn_id_delete_endpoint = _Endpoint(
            settings={
                'response_type': (bool, date, datetime, dict, float, int, list, str, none_type,),
                'auth': [
                    'AuthorizationHeader'
                ],
                'endpoint_path': '/connections/{conn_id}',
                'operation_id': 'connections_conn_id_delete',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'conn_id',
                ],
                'required': [
                    'conn_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'conn_id':
                        (str,),
                },
                'attribute_map': {
                    'conn_id': 'conn_id',
                },
                'location_map': {
                    'conn_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.connections_conn_id_endpoints_get_endpoint = _Endpoint(
            settings={
                'response_type': (EndpointsResult,),
                'auth': [
                    'AuthorizationHeader'
                ],
                'endpoint_path': '/connections/{conn_id}/endpoints',
                'operation_id': 'connections_conn_id_endpoints_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'conn_id',
                ],
                'required': [
                    'conn_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'conn_id':
                        (str,),
                },
                'attribute_map': {
                    'conn_id': 'conn_id',
                },
                'location_map': {
                    'conn_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.connections_conn_id_establish_inbound_ref_id_post_endpoint = _Endpoint(
            settings={
                'response_type': (bool, date, datetime, dict, float, int, list, str, none_type,),
                'auth': [
                    'AuthorizationHeader'
                ],
                'endpoint_path': '/connections/{conn_id}/establish-inbound/{ref_id}',
                'operation_id': 'connections_conn_id_establish_inbound_ref_id_post',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'conn_id',
                    'ref_id',
                ],
                'required': [
                    'conn_id',
                    'ref_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'conn_id':
                        (str,),
                    'ref_id':
                        (str,),
                },
                'attribute_map': {
                    'conn_id': 'conn_id',
                    'ref_id': 'ref_id',
                },
                'location_map': {
                    'conn_id': 'path',
                    'ref_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.connections_conn_id_get_endpoint = _Endpoint(
            settings={
                'response_type': (ConnRecord,),
                'auth': [
                    'AuthorizationHeader'
                ],
                'endpoint_path': '/connections/{conn_id}',
                'operation_id': 'connections_conn_id_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'conn_id',
                ],
                'required': [
                    'conn_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'conn_id':
                        (str,),
                },
                'attribute_map': {
                    'conn_id': 'conn_id',
                },
                'location_map': {
                    'conn_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.connections_conn_id_metadata_get_endpoint = _Endpoint(
            settings={
                'response_type': (ConnectionMetadata,),
                'auth': [
                    'AuthorizationHeader'
                ],
                'endpoint_path': '/connections/{conn_id}/metadata',
                'operation_id': 'connections_conn_id_metadata_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'conn_id',
                    'key',
                ],
                'required': [
                    'conn_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'conn_id':
                        (str,),
                    'key':
                        (str,),
                },
                'attribute_map': {
                    'conn_id': 'conn_id',
                    'key': 'key',
                },
                'location_map': {
                    'conn_id': 'path',
                    'key': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.connections_conn_id_metadata_post_endpoint = _Endpoint(
            settings={
                'response_type': (ConnectionMetadata,),
                'auth': [
                    'AuthorizationHeader'
                ],
                'endpoint_path': '/connections/{conn_id}/metadata',
                'operation_id': 'connections_conn_id_metadata_post',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'conn_id',
                    'body',
                ],
                'required': [
                    'conn_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'conn_id':
                        (str,),
                    'body':
                        (ConnectionMetadataSetRequest,),
                },
                'attribute_map': {
                    'conn_id': 'conn_id',
                },
                'location_map': {
                    'conn_id': 'path',
                    'body': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.connections_create_invitation_post_endpoint = _Endpoint(
            settings={
                'response_type': (InvitationResult,),
                'auth': [
                    'AuthorizationHeader'
                ],
                'endpoint_path': '/connections/create-invitation',
                'operation_id': 'connections_create_invitation_post',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'alias',
                    'auto_accept',
                    'multi_use',
                    'public',
                    'body',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'alias':
                        (str,),
                    'auto_accept':
                        (bool,),
                    'multi_use':
                        (bool,),
                    'public':
                        (bool,),
                    'body':
                        (CreateInvitationRequest,),
                },
                'attribute_map': {
                    'alias': 'alias',
                    'auto_accept': 'auto_accept',
                    'multi_use': 'multi_use',
                    'public': 'public',
                },
                'location_map': {
                    'alias': 'query',
                    'auto_accept': 'query',
                    'multi_use': 'query',
                    'public': 'query',
                    'body': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.connections_create_static_post_endpoint = _Endpoint(
            settings={
                'response_type': (ConnectionStaticResult,),
                'auth': [
                    'AuthorizationHeader'
                ],
                'endpoint_path': '/connections/create-static',
                'operation_id': 'connections_create_static_post',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'body',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'body':
                        (ConnectionStaticRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'body': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.connections_get_endpoint = _Endpoint(
            settings={
                'response_type': (ConnectionList,),
                'auth': [
                    'AuthorizationHeader'
                ],
                'endpoint_path': '/connections',
                'operation_id': 'connections_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'alias',
                    'connection_protocol',
                    'invitation_key',
                    'my_did',
                    'state',
                    'their_did',
                    'their_role',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                    'connection_protocol',
                    'state',
                    'their_role',
                ],
                'validation': [
                    'invitation_key',
                    'my_did',
                    'their_did',
                ]
            },
            root_map={
                'validations': {
                    ('invitation_key',): {

                        'regex': {
                            'pattern': r'^[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{43,44}$',  # noqa: E501
                        },
                    },
                    ('my_did',): {

                        'regex': {
                            'pattern': r'^(did:sov:)?[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}$',  # noqa: E501
                        },
                    },
                    ('their_did',): {

                        'regex': {
                            'pattern': r'^(did:sov:)?[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                    ('connection_protocol',): {

                        "CONNECTIONS/1.0": "connections/1.0",
                        "DIDEXCHANGE/1.0": "didexchange/1.0"
                    },
                    ('state',): {

                        "ABANDONED": "abandoned",
                        "RESPONSE": "response",
                        "REQUEST": "request",
                        "COMPLETED": "completed",
                        "ACTIVE": "active",
                        "INVITATION": "invitation",
                        "START": "start",
                        "INIT": "init",
                        "ERROR": "error"
                    },
                    ('their_role',): {

                        "INVITEE": "invitee",
                        "REQUESTER": "requester",
                        "INVITER": "inviter",
                        "RESPONDER": "responder"
                    },
                },
                'openapi_types': {
                    'alias':
                        (str,),
                    'connection_protocol':
                        (str,),
                    'invitation_key':
                        (str,),
                    'my_did':
                        (str,),
                    'state':
                        (str,),
                    'their_did':
                        (str,),
                    'their_role':
                        (str,),
                },
                'attribute_map': {
                    'alias': 'alias',
                    'connection_protocol': 'connection_protocol',
                    'invitation_key': 'invitation_key',
                    'my_did': 'my_did',
                    'state': 'state',
                    'their_did': 'their_did',
                    'their_role': 'their_role',
                },
                'location_map': {
                    'alias': 'query',
                    'connection_protocol': 'query',
                    'invitation_key': 'query',
                    'my_did': 'query',
                    'state': 'query',
                    'their_did': 'query',
                    'their_role': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.connections_receive_invitation_post_endpoint = _Endpoint(
            settings={
                'response_type': (ConnRecord,),
                'auth': [
                    'AuthorizationHeader'
                ],
                'endpoint_path': '/connections/receive-invitation',
                'operation_id': 'connections_receive_invitation_post',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'alias',
                    'auto_accept',
                    'mediation_id',
                    'body',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'alias':
                        (str,),
                    'auto_accept':
                        (bool,),
                    'mediation_id':
                        (str,),
                    'body':
                        (ReceiveInvitationRequest,),
                },
                'attribute_map': {
                    'alias': 'alias',
                    'auto_accept': 'auto_accept',
                    'mediation_id': 'mediation_id',
                },
                'location_map': {
                    'alias': 'query',
                    'auto_accept': 'query',
                    'mediation_id': 'query',
                    'body': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )

    def connections_conn_id_accept_invitation_post(
        self,
        conn_id,
        **kwargs
    ):
        """Accept a stored connection invitation  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.connections_conn_id_accept_invitation_post(conn_id, async_req=True)
        >>> result = thread.get()

        Args:
            conn_id (str): Connection identifier

        Keyword Args:
            mediation_id (str): Identifier for active mediation record to be used. [optional]
            my_endpoint (str): My URL endpoint. [optional]
            my_label (str): Label for connection. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            ConnRecord
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['conn_id'] = \
            conn_id
        return self.connections_conn_id_accept_invitation_post_endpoint.call_with_http_info(**kwargs)

    def connections_conn_id_accept_request_post(
        self,
        conn_id,
        **kwargs
    ):
        """Accept a stored connection request  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.connections_conn_id_accept_request_post(conn_id, async_req=True)
        >>> result = thread.get()

        Args:
            conn_id (str): Connection identifier

        Keyword Args:
            my_endpoint (str): My URL endpoint. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            ConnRecord
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['conn_id'] = \
            conn_id
        return self.connections_conn_id_accept_request_post_endpoint.call_with_http_info(**kwargs)

    def connections_conn_id_delete(
        self,
        conn_id,
        **kwargs
    ):
        """Remove an existing connection record  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.connections_conn_id_delete(conn_id, async_req=True)
        >>> result = thread.get()

        Args:
            conn_id (str): Connection identifier

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            bool, date, datetime, dict, float, int, list, str, none_type
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['conn_id'] = \
            conn_id
        return self.connections_conn_id_delete_endpoint.call_with_http_info(**kwargs)

    def connections_conn_id_endpoints_get(
        self,
        conn_id,
        **kwargs
    ):
        """Fetch connection remote endpoint  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.connections_conn_id_endpoints_get(conn_id, async_req=True)
        >>> result = thread.get()

        Args:
            conn_id (str): Connection identifier

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            EndpointsResult
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['conn_id'] = \
            conn_id
        return self.connections_conn_id_endpoints_get_endpoint.call_with_http_info(**kwargs)

    def connections_conn_id_establish_inbound_ref_id_post(
        self,
        conn_id,
        ref_id,
        **kwargs
    ):
        """Assign another connection as the inbound connection  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.connections_conn_id_establish_inbound_ref_id_post(conn_id, ref_id, async_req=True)
        >>> result = thread.get()

        Args:
            conn_id (str): Connection identifier
            ref_id (str): Inbound connection identifier

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            bool, date, datetime, dict, float, int, list, str, none_type
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['conn_id'] = \
            conn_id
        kwargs['ref_id'] = \
            ref_id
        return self.connections_conn_id_establish_inbound_ref_id_post_endpoint.call_with_http_info(**kwargs)

    def connections_conn_id_get(
        self,
        conn_id,
        **kwargs
    ):
        """Fetch a single connection record  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.connections_conn_id_get(conn_id, async_req=True)
        >>> result = thread.get()

        Args:
            conn_id (str): Connection identifier

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            ConnRecord
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['conn_id'] = \
            conn_id
        return self.connections_conn_id_get_endpoint.call_with_http_info(**kwargs)

    def connections_conn_id_metadata_get(
        self,
        conn_id,
        **kwargs
    ):
        """Fetch connection metadata  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.connections_conn_id_metadata_get(conn_id, async_req=True)
        >>> result = thread.get()

        Args:
            conn_id (str): Connection identifier

        Keyword Args:
            key (str): Key to retrieve.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            ConnectionMetadata
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['conn_id'] = \
            conn_id
        return self.connections_conn_id_metadata_get_endpoint.call_with_http_info(**kwargs)

    def connections_conn_id_metadata_post(
        self,
        conn_id,
        **kwargs
    ):
        """Set connection metadata  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.connections_conn_id_metadata_post(conn_id, async_req=True)
        >>> result = thread.get()

        Args:
            conn_id (str): Connection identifier

        Keyword Args:
            body (ConnectionMetadataSetRequest): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            ConnectionMetadata
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['conn_id'] = \
            conn_id
        return self.connections_conn_id_metadata_post_endpoint.call_with_http_info(**kwargs)

    def connections_create_invitation_post(
        self,
        **kwargs
    ):
        """Create a new connection invitation  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.connections_create_invitation_post(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            alias (str): Alias. [optional]
            auto_accept (bool): Auto-accept connection (defaults to configuration). [optional]
            multi_use (bool): Create invitation for multiple use (default false). [optional]
            public (bool): Create invitation from public DID (default false). [optional]
            body (CreateInvitationRequest): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            InvitationResult
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        return self.connections_create_invitation_post_endpoint.call_with_http_info(**kwargs)

    def connections_create_static_post(
        self,
        **kwargs
    ):
        """Create a new static connection  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.connections_create_static_post(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            body (ConnectionStaticRequest): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            ConnectionStaticResult
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        return self.connections_create_static_post_endpoint.call_with_http_info(**kwargs)

    def connections_get(
        self,
        **kwargs
    ):
        """Query agent-to-agent connections  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.connections_get(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            alias (str): Alias. [optional]
            connection_protocol (str): Connection protocol used. [optional]
            invitation_key (str): invitation key. [optional]
            my_did (str): My DID. [optional]
            state (str): Connection state. [optional]
            their_did (str): Their DID. [optional]
            their_role (str): Their role in the connection protocol. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            ConnectionList
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        return self.connections_get_endpoint.call_with_http_info(**kwargs)

    def connections_receive_invitation_post(
        self,
        **kwargs
    ):
        """Receive a new connection invitation  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.connections_receive_invitation_post(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            alias (str): Alias. [optional]
            auto_accept (bool): Auto-accept connection (defaults to configuration). [optional]
            mediation_id (str): Identifier for active mediation record to be used. [optional]
            body (ReceiveInvitationRequest): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            ConnRecord
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        return self.connections_receive_invitation_post_endpoint.call_with_http_info(**kwargs)

