# coding: utf-8

from __future__ import annotations
from datetime import date, datetime  # noqa: F401

import re  # noqa: F401
from typing import Any, Dict, List, Optional  # noqa: F401

from pydantic import AnyUrl, BaseModel, EmailStr, validator  # noqa: F401
from acapy_wrapper.models.constraints import Constraints
from acapy_wrapper.models.schemas_input_descriptor_filter import (
    SchemasInputDescriptorFilter,
)


def schema_field(string: str) -> str:
    if string == "schema":
        return "x_schema"
    return string


class InputDescriptors(BaseModel):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.

    InputDescriptors - a model defined in OpenAPI

        constraints: The constraints of this InputDescriptors [Optional].
        group: The group of this InputDescriptors [Optional].
        id: The id of this InputDescriptors [Optional].
        metadata: The metadata of this InputDescriptors [Optional].
        name: The name of this InputDescriptors [Optional].
        purpose: The purpose of this InputDescriptors [Optional].
        schema: The schema of this InputDescriptors [Optional].
    """

    constraints: Optional[Constraints] = None
    group: Optional[List[str]] = None
    id: Optional[str] = None
    metadata: Optional[Dict[str, Any]] = None
    name: Optional[str] = None
    purpose: Optional[str] = None
    x_schema: Optional[SchemasInputDescriptorFilter] = None

    class Config:
        alias_generator = schema_field


InputDescriptors.update_forward_refs()
