# coding: utf-8

from __future__ import annotations
from datetime import date, datetime  # noqa: F401

import re  # noqa: F401
from typing import Any, Dict, List, Optional  # noqa: F401

from pydantic import AnyUrl, BaseModel, EmailStr, validator  # noqa: F401
from acapy_wrapper.models.indy_key_correctness_proof import IndyKeyCorrectnessProof


class IndyCredAbstract(BaseModel):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.

    IndyCredAbstract - a model defined in OpenAPI

        cred_def_id: The cred_def_id of this IndyCredAbstract.
        key_correctness_proof: The key_correctness_proof of this IndyCredAbstract.
        nonce: The nonce of this IndyCredAbstract.
        schema_id: The schema_id of this IndyCredAbstract.
    """

    cred_def_id: str
    key_correctness_proof: IndyKeyCorrectnessProof
    nonce: str
    schema_id: str

    @validator("cred_def_id")
    def cred_def_id_pattern(cls, value):
        assert value is not None and re.match(
            r"^([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}):3:CL:(([1-9][0-9]*)|([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}:2:.+:[0-9.]+)):(.+)?$",
            value,
        )
        return value

    @validator("nonce")
    def nonce_pattern(cls, value):
        assert value is not None and re.match(r"^[0-9]*$", value)
        return value

    @validator("schema_id")
    def schema_id_pattern(cls, value):
        assert value is not None and re.match(
            r"^[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}:2:.+:[0-9.]+$",
            value,
        )
        return value


IndyCredAbstract.update_forward_refs()
