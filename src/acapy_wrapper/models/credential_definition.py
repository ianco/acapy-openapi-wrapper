# coding: utf-8

from __future__ import annotations
from datetime import date, datetime  # noqa: F401

import re  # noqa: F401
from typing import Any, Dict, List, Optional  # noqa: F401

from pydantic import AnyUrl, BaseModel, EmailStr, validator  # noqa: F401
from acapy_wrapper.models.cred_def_value import CredDefValue


class CredentialDefinition(BaseModel):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.

    CredentialDefinition - a model defined in OpenAPI

        id: The id of this CredentialDefinition [Optional].
        schema_id: The schema_id of this CredentialDefinition [Optional].
        tag: The tag of this CredentialDefinition [Optional].
        type: The type of this CredentialDefinition [Optional].
        value: The value of this CredentialDefinition [Optional].
        ver: The ver of this CredentialDefinition [Optional].
    """

    id: Optional[str] = None
    schema_id: Optional[str] = None
    tag: Optional[str] = None
    type: Optional[Dict[str, Any]] = None
    value: Optional[CredDefValue] = None
    ver: Optional[str] = None

    @validator("id")
    def id_pattern(cls, value):
        assert value is not None and re.match(r"^([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}):3:CL:(([1-9][0-9]*)|([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}:2:.+:[0-9.]+)):(.+)?$", value)
        return value

    @validator("ver")
    def ver_pattern(cls, value):
        assert value is not None and re.match(r"^[0-9.]+$", value)
        return value

CredentialDefinition.update_forward_refs()
