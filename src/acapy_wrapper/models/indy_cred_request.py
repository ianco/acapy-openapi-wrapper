# coding: utf-8

from __future__ import annotations
from datetime import date, datetime  # noqa: F401

import re  # noqa: F401
from typing import Any, Dict, List, Optional  # noqa: F401

from pydantic import AnyUrl, BaseModel, EmailStr, validator  # noqa: F401


class IndyCredRequest(BaseModel):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.

    IndyCredRequest - a model defined in OpenAPI

        blinded_ms: The blinded_ms of this IndyCredRequest.
        blinded_ms_correctness_proof: The blinded_ms_correctness_proof of this IndyCredRequest.
        cred_def_id: The cred_def_id of this IndyCredRequest.
        nonce: The nonce of this IndyCredRequest.
        prover_did: The prover_did of this IndyCredRequest [Optional].
    """

    blinded_ms: Dict[str, Any]
    blinded_ms_correctness_proof: Dict[str, Any]
    cred_def_id: str
    nonce: str
    prover_did: Optional[str] = None

    @validator("cred_def_id")
    def cred_def_id_pattern(cls, value):
        assert value is not None and re.match(
            r"^([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}):3:CL:(([1-9][0-9]*)|([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}:2:.+:[0-9.]+)):(.+)?$",
            value,
        )
        return value

    @validator("nonce")
    def nonce_pattern(cls, value):
        assert value is not None and re.match(r"^[0-9]*$", value)
        return value

    @validator("prover_did")
    def prover_did_pattern(cls, value):
        assert value is not None and re.match(
            r"^(did:sov:)?[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}$",
            value,
        )
        return value


IndyCredRequest.update_forward_refs()
