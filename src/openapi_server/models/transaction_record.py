# coding: utf-8

from __future__ import annotations
from datetime import date, datetime  # noqa: F401

import re  # noqa: F401
from typing import Any, Dict, List, Optional  # noqa: F401

from pydantic import AnyUrl, BaseModel, EmailStr, validator  # noqa: F401


class TransactionRecord(BaseModel):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.

    TransactionRecord - a model defined in OpenAPI

        type: The type of this TransactionRecord [Optional].
        connection_id: The connection_id of this TransactionRecord [Optional].
        created_at: The created_at of this TransactionRecord [Optional].
        endorser_write_txn: The endorser_write_txn of this TransactionRecord [Optional].
        formats: The formats of this TransactionRecord [Optional].
        messages_attach: The messages_attach of this TransactionRecord [Optional].
        meta_data: The meta_data of this TransactionRecord [Optional].
        signature_request: The signature_request of this TransactionRecord [Optional].
        signature_response: The signature_response of this TransactionRecord [Optional].
        state: The state of this TransactionRecord [Optional].
        thread_id: The thread_id of this TransactionRecord [Optional].
        timing: The timing of this TransactionRecord [Optional].
        trace: The trace of this TransactionRecord [Optional].
        transaction_id: The transaction_id of this TransactionRecord [Optional].
        updated_at: The updated_at of this TransactionRecord [Optional].
    """

    type: Optional[str] = None
    connection_id: Optional[str] = None
    created_at: Optional[str] = None
    endorser_write_txn: Optional[bool] = None
    formats: Optional[List[Dict[str, str]]] = None
    messages_attach: Optional[List[dict]] = None
    meta_data: Optional[Dict[str, Any]] = None
    signature_request: Optional[List[dict]] = None
    signature_response: Optional[List[dict]] = None
    state: Optional[str] = None
    thread_id: Optional[str] = None
    timing: Optional[Dict[str, Any]] = None
    trace: Optional[bool] = None
    transaction_id: Optional[str] = None
    updated_at: Optional[str] = None

    @validator("created_at")
    def created_at_pattern(cls, value):
        assert value is not None and re.match(r"^\d{4}-\d\d-\d\d[T ]\d\d:\d\d(?:\:(?:\d\d(?:\.\d{1,6})?))?(?:[+-]\d\d:?\d\d|Z|)$", value)
        return value

    @validator("updated_at")
    def updated_at_pattern(cls, value):
        assert value is not None and re.match(r"^\d{4}-\d\d-\d\d[T ]\d\d:\d\d(?:\:(?:\d\d(?:\.\d{1,6})?))?(?:[+-]\d\d:?\d\d|Z|)$", value)
        return value

TransactionRecord.update_forward_refs()
