# coding: utf-8

from __future__ import annotations
from datetime import date, datetime  # noqa: F401

import re  # noqa: F401
from typing import Any, Dict, List, Optional  # noqa: F401

from pydantic import AnyUrl, BaseModel, EmailStr, validator  # noqa: F401


class ConnRecord(BaseModel):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.

    ConnRecord - a model defined in OpenAPI

        accept: The accept of this ConnRecord [Optional].
        alias: The alias of this ConnRecord [Optional].
        connection_id: The connection_id of this ConnRecord [Optional].
        connection_protocol: The connection_protocol of this ConnRecord [Optional].
        created_at: The created_at of this ConnRecord [Optional].
        error_msg: The error_msg of this ConnRecord [Optional].
        inbound_connection_id: The inbound_connection_id of this ConnRecord [Optional].
        invitation_key: The invitation_key of this ConnRecord [Optional].
        invitation_mode: The invitation_mode of this ConnRecord [Optional].
        invitation_msg_id: The invitation_msg_id of this ConnRecord [Optional].
        my_did: The my_did of this ConnRecord [Optional].
        request_id: The request_id of this ConnRecord [Optional].
        rfc23_state: The rfc23_state of this ConnRecord [Optional].
        routing_state: The routing_state of this ConnRecord [Optional].
        state: The state of this ConnRecord [Optional].
        their_did: The their_did of this ConnRecord [Optional].
        their_label: The their_label of this ConnRecord [Optional].
        their_public_did: The their_public_did of this ConnRecord [Optional].
        their_role: The their_role of this ConnRecord [Optional].
        updated_at: The updated_at of this ConnRecord [Optional].
    """

    accept: Optional[str] = None
    alias: Optional[str] = None
    connection_id: Optional[str] = None
    connection_protocol: Optional[str] = None
    created_at: Optional[str] = None
    error_msg: Optional[str] = None
    inbound_connection_id: Optional[str] = None
    invitation_key: Optional[str] = None
    invitation_mode: Optional[str] = None
    invitation_msg_id: Optional[str] = None
    my_did: Optional[str] = None
    request_id: Optional[str] = None
    rfc23_state: Optional[str] = None
    routing_state: Optional[str] = None
    state: Optional[str] = None
    their_did: Optional[str] = None
    their_label: Optional[str] = None
    their_public_did: Optional[str] = None
    their_role: Optional[str] = None
    updated_at: Optional[str] = None

    @validator("created_at")
    def created_at_pattern(cls, value):
        assert value is not None and re.match(r"^\d{4}-\d\d-\d\d[T ]\d\d:\d\d(?:\:(?:\d\d(?:\.\d{1,6})?))?(?:[+-]\d\d:?\d\d|Z|)$", value)
        return value

    @validator("invitation_key")
    def invitation_key_pattern(cls, value):
        assert value is not None and re.match(r"^[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{43,44}$", value)
        return value

    @validator("my_did")
    def my_did_pattern(cls, value):
        assert value is not None and re.match(r"^(did:sov:)?[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}$", value)
        return value

    @validator("their_did")
    def their_did_pattern(cls, value):
        assert value is not None and re.match(r"^(did:sov:)?[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}$", value)
        return value

    @validator("updated_at")
    def updated_at_pattern(cls, value):
        assert value is not None and re.match(r"^\d{4}-\d\d-\d\d[T ]\d\d:\d\d(?:\:(?:\d\d(?:\.\d{1,6})?))?(?:[+-]\d\d:?\d\d|Z|)$", value)
        return value

ConnRecord.update_forward_refs()
