# coding: utf-8

from __future__ import annotations
from datetime import date, datetime  # noqa: F401

import re  # noqa: F401
from typing import Any, Dict, List, Optional  # noqa: F401

from pydantic import AnyUrl, BaseModel, EmailStr, validator  # noqa: F401
from openapi_server.models.linked_data_proof import LinkedDataProof


class Credential(BaseModel):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.

    Credential - a model defined in OpenAPI

        context: The context of this Credential.
        credential_subject: The credential_subject of this Credential.
        expiration_date: The expiration_date of this Credential [Optional].
        id: The id of this Credential [Optional].
        issuance_date: The issuance_date of this Credential.
        issuer: The issuer of this Credential.
        proof: The proof of this Credential [Optional].
        type: The type of this Credential.
    """

    context: List[dict]
    credential_subject: Dict[str, Any]
    expiration_date: Optional[str] = None
    id: Optional[str] = None
    issuance_date: str
    issuer: Dict[str, Any]
    proof: Optional[LinkedDataProof] = None
    type: List[str]

    @validator("expiration_date")
    def expiration_date_pattern(cls, value):
        assert value is not None and re.match(r"^([0-9]{4})-([0-9]{2})-([0-9]{2})([Tt ]([0-9]{2}):([0-9]{2}):([0-9]{2})(\.[0-9]+)?)?(([Zz]|([+-])([0-9]{2}):([0-9]{2})))?$", value)
        return value

    @validator("id")
    def id_pattern(cls, value):
        assert value is not None and re.match(r"\w+:(\\/?\\/?)[^\s]+", value)
        return value

    @validator("issuance_date")
    def issuance_date_pattern(cls, value):
        assert value is not None and re.match(r"^([0-9]{4})-([0-9]{2})-([0-9]{2})([Tt ]([0-9]{2}):([0-9]{2}):([0-9]{2})(\.[0-9]+)?)?(([Zz]|([+-])([0-9]{2}):([0-9]{2})))?$", value)
        return value

Credential.update_forward_refs()
